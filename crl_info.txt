==== CRL Stuff ====
List: 
1. Certs signed by any other CAs
2. Self-Signed certs 
3. Intermedite CA test
4. Revoke a cert in CRL file and exclude it back again 
5. Verify the Leaf or all certs from CRL file - ssl flags settings 
6. Use of index file by CA while generating certificates 
7. The certs where CRL is present as URLs 

openssl ca -config ca.conf -gencrl -keyfile ca.key -cert ca.crt -out root.crl.pem
openssl crl -inform PEM -in root.crl.pem -outform DER -out root.crl

//Check the CRL file contents 
c:\TEMP\openssl-1.1.1i_2-win32-mingw\openssl.exe crl -in ca.crl.pem -noout -text

//verifies that the certificate is valid
c:\TEMP\openssl-1.1.1i_2-win32-mingw\openssl.exe verify -CAfile ca.crt cert1.crt

//create empty CRL File 
c:\TEMP\openssl-1.1.1i_2-win32-mingw\openssl.exe ca -config ca.conf -gencrl -keyfile ca.key -cert ca.crt -out ca.crl.pem

//revoke a certificate
c:\TEMP\openssl-1.1.1i_2-win32-mingw\openssl.exe ca -config ca.conf  -revoke cer1.crt

X509_STORE_set_flags(ctx->ca_store, X509_V_FLAG_CRL_CHECK | X509_V_FLAG_CRL_CHECK_ALL);


############################################

easy_tls_crl_1.c - passing userdata in x509 ctx and accessing it inside validation callback function 

#### Passing App function pointer in x509 ctx to be called during handshake 

bool(*tls_validator)(void *) = (bool (*)(void *))&TlsConnectionValidator;

bool TlsConnectionValidator(X509_STORE_CTX  *x509_ctx)
{

}

- SSL handshake callback function : 
X509_STORE_CTX* x509_ctx;
SSL* ssl = (SSL *)X509_STORE_CTX_get_app_data(x509_ctx);
SSL_CTX* ssl_ctx = ssl_ctx = SSL_get_SSL_CTX(ssl);
void* p = SSL_CTX_get_ex_data(ssl_ctx, 0);

bool (*appcb)(void *) = (bool (*)(void *))p;
if (appcb)
   preverify = (*appcb)((void*)x509_ctx) ? 1 : 0;

- Set the UserData in TLS context
SSL_CTX_obj & ctx
SSL_CTX_set_ex_data(ctx, 0, (void *)tls_validator);


## Good Links: 
http://www.zedwood.com/article/cpp-check-crl-for-revocation
https://www.feistyduck.com/library/openssl-cookbook/online/ch-openssl.html
https://zakird.com/2013/10/13/certificate-parsing-with-openssl
https://quuxplusone.github.io/blog/2020/01/27/openssl-part-4/




